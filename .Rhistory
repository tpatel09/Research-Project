# Chunk 2
boston.data <- read.csv("boston.csv")
boston.data$CHAS <- factor(boston.data$CHAS)
summary(boston.data)
fit.bos <- lm(formula=MEDV ~ ., data=boston.data)
summary(fit.bos)
# Chunk 3
summary(fit.bos)
# Chunk 4
fit.bos2 <- lm(formula=MEDV ~ CRIM + ZN + CHAS + NOX + RM + DIS + RAD + TAX + PTRATIO + B + LSTAT, data=boston.data)
summary(fit.bos2)
# Chunk 5
summary(fit.bos2)
# Chunk 6
shapiro.test(as.numeric(fit.bos2$residual))
# Chunk 7
par(mfrow=c(1,2))
hist(fit.bos2$residuals, prob = TRUE)
lines(density(fit.bos2$residuals))
qqnorm(y=fit.bos2$residuals)
qqline(y=fit.bos2$residuals, datax = FALSE)
# Chunk 8
qqnorm(y=fit.bos2$residuals)
qqline(y=fit.bos2$residuals, datax = FALSE)
# Chunk 9
data.size = nrow(boston.data)
train.cutoff = round(0.8*data.size, digits=0)
train.data<- boston.data[1:405,]
test.data<- boston.data[406:506,]
# Chunk 10
fit.town.pred <- lm(MEDV ~ CRIM + INDUS + PTRATIO + B, data=train.data)
fit.location.pred <- lm(MEDV ~ DIS + RAD, data=train.data)
fit.prop.pred <- lm(MEDV ~ RM + TAX, data=train.data)
pred.town<-predict (fit.town.pred, test.data, interval="prediction", level=0.95)
pred.location<-predict (fit.location.pred, test.data, interval="prediction", level=0.95)
pred.prop<-predict (fit.prop.pred, test.data, interval="prediction", level=0.95)
# Chunk 11
actual.values<-test.data$MEDV
pred.town.val<-pred.town[,1]
pred.location.val<-pred.location[,1]
pred.prop.val<-pred.prop[,1]
rmse.town <- sqrt(mean((actual.values - pred.town.val)^2, na.rm = TRUE))
rmse.town <- round(rmse.town, digits = 5)
rmse.location <- sqrt(mean((actual.values - pred.location.val)^2, na.rm = TRUE))
rmse.location <- round(rmse.location, digits = 5)
rmse.prop <- sqrt(mean((actual.values - pred.prop.val)^2, na.rm = TRUE))
rmse.prop <- round(rmse.prop, digits = 5)
# Chunk 12
print(paste(rmse.town, " is the predicted town value RMSE."))
print(paste(rmse.location, " is the predicted location value RMSE."))
print(paste(rmse.prop, " is the predicted property RMSE."))
# Chunk 13
fit.CRIM.pred <- lm(MEDV ~ CRIM, data=train.data)
fit.NOX.pred <- lm(MEDV ~ NOX, data=train.data)
fit.RM.pred <- lm(MEDV ~ RM, data=train.data)
pred.CRIM<-predict (fit.CRIM.pred, test.data, interval="prediction", level=0.95)
pred.NOX<-predict (fit.NOX.pred, test.data, interval="prediction", level=0.95)
pred.RM<-predict (fit.RM.pred, test.data, interval="prediction", level=0.95)
pred.CRIM.val<-pred.CRIM[,1]
pred.NOX.val<-pred.NOX[,1]
pred.RM.val<-pred.RM[,1]
rmse.CRIM <- sqrt(mean((actual.values - pred.CRIM.val)^2, na.rm = TRUE))
rmse.CRIM <- round(rmse.CRIM, digits = 5)
rmse.NOX <- sqrt(mean((actual.values - pred.NOX.val)^2, na.rm = TRUE))
rmse.NOX <- round(rmse.NOX, digits = 5)
rmse.RM <- sqrt(mean((actual.values - pred.RM.val)^2, na.rm = TRUE))
rmse.RM <- round(rmse.RM, digits = 5)
print(paste(rmse.CRIM, " is the predicted CRIM value RMSE."))
print(paste(rmse.NOX, " is the predicted NOX value RMSE."))
print(paste(rmse.RM, " is the predicted RM RMSE."))
print(summary(fit.bos))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(caret) # functions or fitting the model, cross validation, etc.
library(ROCR)  # for generating an ROC plot.
library(knitr) # for rendering tables.
library(rpart)
library(tree)
library(randomForest)
library(gbm)
# Chunk 2
boston.data <- read.csv("boston.csv")
boston.data$CHAS <- factor(boston.data$CHAS)
summary(boston.data)
fit.bos <- lm(formula=MEDV ~ ., data=boston.data)
# Chunk 3
summary(fit.bos)
# Chunk 4
fit.bos2 <- lm(formula=MEDV ~ CRIM + ZN + CHAS + NOX + RM + DIS + RAD + TAX + PTRATIO + B + LSTAT, data=boston.data)
# Chunk 5
summary(fit.bos2)
# Chunk 6
shapiro.test(as.numeric(fit.bos2$residual))
# Chunk 7
par(mfrow=c(1,2))
histo <- hist(fit.bos2$residuals, prob = TRUE)
histo <- lines(density(fit.bos2$residuals))
qq <- qqnorm(y=fit.bos2$residuals)
qq <- qqline(y=fit.bos2$residuals, datax = FALSE)
# Chunk 8
print(histo)
print(qq)
# Chunk 9
data.size = nrow(boston.data)
train.cutoff = round(0.8*data.size, digits=0)
train.data<- boston.data[1:405,]
test.data<- boston.data[406:506,]
# Chunk 10
fit.town.pred <- lm(MEDV ~ CRIM + INDUS + PTRATIO + B, data=train.data)
fit.location.pred <- lm(MEDV ~ DIS + RAD, data=train.data)
fit.prop.pred <- lm(MEDV ~ RM + TAX, data=train.data)
pred.town<-predict (fit.town.pred, test.data, interval="prediction", level=0.95)
pred.location<-predict (fit.location.pred, test.data, interval="prediction", level=0.95)
pred.prop<-predict (fit.prop.pred, test.data, interval="prediction", level=0.95)
# Chunk 11
actual.values<-test.data$MEDV
pred.town.val<-pred.town[,1]
pred.location.val<-pred.location[,1]
pred.prop.val<-pred.prop[,1]
rmse.town <- sqrt(mean((actual.values - pred.town.val)^2, na.rm = TRUE))
rmse.town <- round(rmse.town, digits = 5)
rmse.location <- sqrt(mean((actual.values - pred.location.val)^2, na.rm = TRUE))
rmse.location <- round(rmse.location, digits = 5)
rmse.prop <- sqrt(mean((actual.values - pred.prop.val)^2, na.rm = TRUE))
rmse.prop <- round(rmse.prop, digits = 5)
# Chunk 12
print(paste(rmse.town, " is the predicted town value RMSE."))
print(paste(rmse.location, " is the predicted location value RMSE."))
print(paste(rmse.prop, " is the predicted property RMSE."))
# Chunk 13
fit.CRIM.pred <- lm(MEDV ~ CRIM, data=train.data)
fit.NOX.pred <- lm(MEDV ~ NOX, data=train.data)
fit.RM.pred <- lm(MEDV ~ RM, data=train.data)
pred.CRIM<-predict (fit.CRIM.pred, test.data, interval="prediction", level=0.95)
pred.NOX<-predict (fit.NOX.pred, test.data, interval="prediction", level=0.95)
pred.RM<-predict (fit.RM.pred, test.data, interval="prediction", level=0.95)
pred.CRIM.val<-pred.CRIM[,1]
pred.NOX.val<-pred.NOX[,1]
pred.RM.val<-pred.RM[,1]
rmse.CRIM <- sqrt(mean((actual.values - pred.CRIM.val)^2, na.rm = TRUE))
rmse.CRIM <- round(rmse.CRIM, digits = 5)
rmse.NOX <- sqrt(mean((actual.values - pred.NOX.val)^2, na.rm = TRUE))
rmse.NOX <- round(rmse.NOX, digits = 5)
rmse.RM <- sqrt(mean((actual.values - pred.RM.val)^2, na.rm = TRUE))
rmse.RM <- round(rmse.RM, digits = 5)
# Chunk 14
print(paste(rmse.CRIM, " is the predicted CRIM value RMSE."))
print(paste(rmse.NOX, " is the predicted NOX value RMSE."))
print(paste(rmse.RM, " is the predicted RM RMSE."))
# Chunk 15
seed.val<-12345
set.seed(seed.val)
data.size<-nrow(boston.data)
train.rows<-sample(1:data.size, data.size/2)
train.data<-boston.data[train.rows,]
test.data<-boston.data[-train.rows,]
true.vals<-test.data[,13]
rf.boston<-randomForest(MEDV~., data=train.data, mtry=6, importance=TRUE)
rf.pred<-predict(rf.boston, newdata=test.data)
importance(rf.boston)
varImpPlot(rf.boston)
# Chunk 16
importance(rf.boston)
varImpPlot(rf.boston)
# Chunk 17
tree.boston<-tree(MEDV~., data=train.data)
summary(tree.boston)
plot(tree.boston)
text(tree.boston)
# Chunk 18
tree.pred<- predict(tree.boston, newdata=test.data)
mean((tree.pred-true.vals)^2)
# Chunk 19
cv.boston<-cv.tree(tree.boston)
plot(cv.boston$size, cv.boston$dev, type="b")
# Chunk 20
best.size <- 5
pruned.tree<-prune.tree(tree.boston, best=best.size)
plot(pruned.tree)
text(pruned.tree)
# Chunk 21
tree.pred2<- predict(pruned.tree, newdata=test.data)
mean((tree.pred2-true.vals)^2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(caret) # functions or fitting the model, cross validation, etc.
library(ROCR)  # for generating an ROC plot.
library(knitr) # for rendering tables.
library(rpart)
library(tree)
library(randomForest)
library(gbm)
# Chunk 2
boston.data <- read.csv("boston.csv")
boston.data$CHAS <- factor(boston.data$CHAS)
summary(boston.data)
fit.bos <- lm(formula=MEDV ~ ., data=boston.data)
# Chunk 3
summary(fit.bos)
# Chunk 4
fit.bos2 <- lm(formula=MEDV ~ CRIM + ZN + CHAS + NOX + RM + DIS + RAD + TAX + PTRATIO + B + LSTAT, data=boston.data)
# Chunk 5
summary(fit.bos2)
# Chunk 6
shapiro.test(as.numeric(fit.bos2$residual))
# Chunk 7
par(mfrow=c(1,2))
hist(fit.bos2$residuals, prob = TRUE)
lines(density(fit.bos2$residuals))
qqnorm(y=fit.bos2$residuals)
qqline(y=fit.bos2$residuals, datax = FALSE)
# Chunk 8
data.size = nrow(boston.data)
train.cutoff = round(0.8*data.size, digits=0)
train.data<- boston.data[1:405,]
test.data<- boston.data[406:506,]
# Chunk 9
fit.town.pred <- lm(MEDV ~ CRIM + INDUS + PTRATIO + B, data=train.data)
fit.location.pred <- lm(MEDV ~ DIS + RAD, data=train.data)
fit.prop.pred <- lm(MEDV ~ RM + TAX, data=train.data)
pred.town<-predict (fit.town.pred, test.data, interval="prediction", level=0.95)
pred.location<-predict (fit.location.pred, test.data, interval="prediction", level=0.95)
pred.prop<-predict (fit.prop.pred, test.data, interval="prediction", level=0.95)
# Chunk 10
actual.values<-test.data$MEDV
pred.town.val<-pred.town[,1]
pred.location.val<-pred.location[,1]
pred.prop.val<-pred.prop[,1]
rmse.town <- sqrt(mean((actual.values - pred.town.val)^2, na.rm = TRUE))
rmse.town <- round(rmse.town, digits = 5)
rmse.location <- sqrt(mean((actual.values - pred.location.val)^2, na.rm = TRUE))
rmse.location <- round(rmse.location, digits = 5)
rmse.prop <- sqrt(mean((actual.values - pred.prop.val)^2, na.rm = TRUE))
rmse.prop <- round(rmse.prop, digits = 5)
# Chunk 11
print(paste(rmse.town, " is the predicted town value RMSE."))
print(paste(rmse.location, " is the predicted location value RMSE."))
print(paste(rmse.prop, " is the predicted property RMSE."))
# Chunk 12
fit.CRIM.pred <- lm(MEDV ~ CRIM, data=train.data)
fit.NOX.pred <- lm(MEDV ~ NOX, data=train.data)
fit.RM.pred <- lm(MEDV ~ RM, data=train.data)
pred.CRIM<-predict (fit.CRIM.pred, test.data, interval="prediction", level=0.95)
pred.NOX<-predict (fit.NOX.pred, test.data, interval="prediction", level=0.95)
pred.RM<-predict (fit.RM.pred, test.data, interval="prediction", level=0.95)
pred.CRIM.val<-pred.CRIM[,1]
pred.NOX.val<-pred.NOX[,1]
pred.RM.val<-pred.RM[,1]
rmse.CRIM <- sqrt(mean((actual.values - pred.CRIM.val)^2, na.rm = TRUE))
rmse.CRIM <- round(rmse.CRIM, digits = 5)
rmse.NOX <- sqrt(mean((actual.values - pred.NOX.val)^2, na.rm = TRUE))
rmse.NOX <- round(rmse.NOX, digits = 5)
rmse.RM <- sqrt(mean((actual.values - pred.RM.val)^2, na.rm = TRUE))
rmse.RM <- round(rmse.RM, digits = 5)
# Chunk 13
print(paste(rmse.CRIM, " is the predicted CRIM value RMSE."))
print(paste(rmse.NOX, " is the predicted NOX value RMSE."))
print(paste(rmse.RM, " is the predicted RM RMSE."))
# Chunk 14
seed.val<-12345
set.seed(seed.val)
data.size<-nrow(boston.data)
train.rows<-sample(1:data.size, data.size/2)
train.data<-boston.data[train.rows,]
test.data<-boston.data[-train.rows,]
true.vals<-test.data[,13]
rf.boston<-randomForest(MEDV~., data=train.data, mtry=6, importance=TRUE)
rf.pred<-predict(rf.boston, newdata=test.data)
importance(rf.boston)
varImpPlot(rf.boston)
# Chunk 15
importance(rf.boston)
varImpPlot(rf.boston)
# Chunk 16
tree.boston<-tree(MEDV~., data=train.data)
summary(tree.boston)
plot(tree.boston)
text(tree.boston)
# Chunk 17
tree.pred<- predict(tree.boston, newdata=test.data)
mean((tree.pred-true.vals)^2)
# Chunk 18
cv.boston<-cv.tree(tree.boston)
plot(cv.boston$size, cv.boston$dev, type="b")
# Chunk 19
best.size <- 5
pruned.tree<-prune.tree(tree.boston, best=best.size)
plot(pruned.tree)
text(pruned.tree)
# Chunk 20
tree.pred2<- predict(pruned.tree, newdata=test.data)
mean((tree.pred2-true.vals)^2)
boston.data <- read.csv("boston.csv")
boston.data$CHAS <- factor(boston.data$CHAS)
fit.bos <- lm(formula=MEDV ~ ., data=boston.data)
summary(fit.bos)
par(mfrow=c(1,2))
hist(fit.bos2$residuals, prob = TRUE)
lines(density(fit.bos2$residuals))
qqnorm(y=fit.bos2$residuals)
qqline(y=fit.bos2$residuals, datax = FALSE)
shapiro.test(as.numeric(fit.bos2$residual))
boston.data <- read.csv("boston.csv")
boston.data$CHAS <- factor(boston.data$CHAS)
fit.bos <- lm(formula=MEDV ~ ., data=boston.data)
summary(fit.bos)
?hist
par(mfrow=c(1,2))
hist(fit.bos2$residuals, prob = TRUE, main = paste("Histogram of Residuals for fit.bos2"))
lines(density(fit.bos2$residuals))
qqnorm(y=fit.bos2$residuals)
qqline(y=fit.bos2$residuals, datax = FALSE)
par(mfrow=c(1,2))
hist(fit.bos2$residuals, prob = TRUE, main = paste("Histogram of Residuals for fit.bos2"))
lines(density(fit.bos2$residuals))
qqnorm(y=fit.bos2$residuals, main = paste("Q-Q Plot of Residuals for fit.bos2"))
qqline(y=fit.bos2$residuals, datax = FALSE)
data.size = nrow(boston.data)
train.cutoff = round(0.8*data.size, digits=0)
train.data<- boston.data[1:405,]
test.data<- boston.data[406:506,]
seed.val<-12345
set.seed(seed.val)
data.size<-nrow(boston.data)
train.rows<-sample(1:data.size, data.size/2)
train.data<-boston.data[train.rows,]
test.data<-boston.data[-train.rows,]
true.vals<-test.data[,13]
rf.boston<-randomForest(MEDV~., data=train.data, mtry=6, importance=TRUE)
rf.pred<-predict(rf.boston, newdata=test.data)
importance(rf.boston)
varImpPlot(rf.boston)
tree.boston<-tree(MEDV~., data=train.data)
summary(tree.boston)
plot(tree.boston)
text(tree.boston)
tree.boston<-tree(MEDV~., data=train.data)
summary(tree.boston)
plot(tree.boston)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(caret) # functions or fitting the model, cross validation, etc.
library(ROCR)  # for generating an ROC plot.
library(knitr) # for rendering tables.
library(rpart)
library(tree)
library(randomForest)
library(gbm)
# Chunk 2
boston.data <- read.csv("boston.csv")
boston.data$CHAS <- factor(boston.data$CHAS)
fit.bos <- lm(formula=MEDV ~ ., data=boston.data)
summary(fit.bos)
# Chunk 3
fit.bos2 <- lm(formula=MEDV ~ CRIM + ZN + CHAS + NOX + RM + DIS + RAD + TAX + PTRATIO + B + LSTAT, data=boston.data)
summary(fit.bos2)
# Chunk 4
shapiro.test(as.numeric(fit.bos2$residual))
# Chunk 5
par(mfrow=c(1,2))
hist(fit.bos2$residuals, prob = TRUE, main = paste("Histogram of Residuals for fit.bos2"))
lines(density(fit.bos2$residuals))
qqnorm(y=fit.bos2$residuals, main = paste("Q-Q Plot of Residuals for fit.bos2"))
qqline(y=fit.bos2$residuals, datax = FALSE)
# Chunk 6
data.size = nrow(boston.data)
train.cutoff = round(0.8*data.size, digits=0)
train.data<- boston.data[1:405,]
test.data<- boston.data[406:506,]
# Chunk 7
fit.town.pred <- lm(MEDV ~ CRIM + INDUS + PTRATIO + B, data=train.data)
fit.location.pred <- lm(MEDV ~ DIS + RAD, data=train.data)
fit.prop.pred <- lm(MEDV ~ RM + TAX, data=train.data)
pred.town<-predict (fit.town.pred, test.data, interval="prediction", level=0.95)
pred.location<-predict (fit.location.pred, test.data, interval="prediction", level=0.95)
pred.prop<-predict (fit.prop.pred, test.data, interval="prediction", level=0.95)
# Chunk 8
actual.values<-test.data$MEDV
pred.town.val<-pred.town[,1]
pred.location.val<-pred.location[,1]
pred.prop.val<-pred.prop[,1]
rmse.town <- sqrt(mean((actual.values - pred.town.val)^2, na.rm = TRUE))
rmse.town <- round(rmse.town, digits = 5)
rmse.location <- sqrt(mean((actual.values - pred.location.val)^2, na.rm = TRUE))
rmse.location <- round(rmse.location, digits = 5)
rmse.prop <- sqrt(mean((actual.values - pred.prop.val)^2, na.rm = TRUE))
rmse.prop <- round(rmse.prop, digits = 5)
print(paste(rmse.town, " is the predicted town value RMSE."))
print(paste(rmse.location, " is the predicted location value RMSE."))
print(paste(rmse.prop, " is the predicted property RMSE."))
# Chunk 9
fit.CRIM.pred <- lm(MEDV ~ CRIM, data=train.data)
fit.NOX.pred <- lm(MEDV ~ NOX, data=train.data)
fit.RM.pred <- lm(MEDV ~ RM, data=train.data)
pred.CRIM<-predict (fit.CRIM.pred, test.data, interval="prediction", level=0.95)
pred.NOX<-predict (fit.NOX.pred, test.data, interval="prediction", level=0.95)
pred.RM<-predict (fit.RM.pred, test.data, interval="prediction", level=0.95)
pred.CRIM.val<-pred.CRIM[,1]
pred.NOX.val<-pred.NOX[,1]
pred.RM.val<-pred.RM[,1]
rmse.CRIM <- sqrt(mean((actual.values - pred.CRIM.val)^2, na.rm = TRUE))
rmse.CRIM <- round(rmse.CRIM, digits = 5)
rmse.NOX <- sqrt(mean((actual.values - pred.NOX.val)^2, na.rm = TRUE))
rmse.NOX <- round(rmse.NOX, digits = 5)
rmse.RM <- sqrt(mean((actual.values - pred.RM.val)^2, na.rm = TRUE))
rmse.RM <- round(rmse.RM, digits = 5)
print(paste(rmse.CRIM, " is the predicted CRIM value RMSE."))
print(paste(rmse.NOX, " is the predicted NOX value RMSE."))
print(paste(rmse.RM, " is the predicted RM RMSE."))
# Chunk 10
seed.val<-12345
set.seed(seed.val)
data.size<-nrow(boston.data)
train.rows<-sample(1:data.size, data.size/2)
train.data<-boston.data[train.rows,]
test.data<-boston.data[-train.rows,]
true.vals<-test.data[,13]
rf.boston<-randomForest(MEDV~., data=train.data, mtry=6, importance=TRUE)
rf.pred<-predict(rf.boston, newdata=test.data)
importance(rf.boston)
varImpPlot(rf.boston)
tree.boston<-tree(MEDV~., data=train.data)
summary(tree.boston)
plot(tree.boston)
text(tree.boston)
?importance
par(mfrow=c(1,2))
hist(fit.bos2$residuals, prob = TRUE, main = paste("Histogram of Residuals for fit.bos2"))
lines(density(fit.bos2$residuals))
qqnorm(y=fit.bos2$residuals, main = paste("Q-Q Plot of Residuals for fit.bos2"))
qqline(y=fit.bos2$residuals, datax = FALSE)
tree.boston <- tree(MEDV~., data=train.data)
summary(tree.boston)
plot(tree.boston)
text(tree.boston)
?varImpPlot
seed.val<-12345
set.seed(seed.val)
data.size<-nrow(boston.data)
train.rows<-sample(1:data.size, data.size/2)
train.data<-boston.data[train.rows,]
test.data<-boston.data[-train.rows,]
true.vals<-test.data[,13]
rf.boston<-randomForest(MEDV~., data=train.data, mtry=6, importance=TRUE)
rf.pred<-predict(rf.boston, newdata=test.data)
importance(rf.boston)
varImpPlot(rf.boston, main = paste("plot"))
seed.val<-12345
set.seed(seed.val)
data.size<-nrow(boston.data)
train.rows<-sample(1:data.size, data.size/2)
train.data<-boston.data[train.rows,]
test.data<-boston.data[-train.rows,]
true.vals<-test.data[,13]
rf.boston<-randomForest(MEDV~., data=train.data, mtry=6, importance=TRUE)
rf.pred<-predict(rf.boston, newdata=test.data)
importance(rf.boston)
varImpPlot(rf.boston, main = paste("Plot 3: Variable Importance Plot for Dataset"))
seed.val<-12345
set.seed(seed.val)
data.size<-nrow(boston.data)
train.rows<-sample(1:data.size, data.size/2)
train.data<-boston.data[train.rows,]
test.data<-boston.data[-train.rows,]
true.vals<-test.data[,13]
rf.boston<-randomForest(MEDV~., data=train.data, mtry=6, importance=TRUE)
rf.pred<-predict(rf.boston, newdata=test.data)
importance(rf.boston)
varImpPlot(rf.boston, main = paste("Plot 3: Variable Importance Plot for Data set"))
seed.val<-12345
set.seed(seed.val)
data.size<-nrow(boston.data)
train.rows<-sample(1:data.size, data.size/2)
train.data<-boston.data[train.rows,]
test.data<-boston.data[-train.rows,]
true.vals<-test.data[,13]
rf.boston<-randomForest(MEDV~., data=train.data, mtry=6, importance=TRUE)
rf.pred<-predict(rf.boston, newdata=test.data)
importance(rf.boston)
varImpPlot(rf.boston, main = paste("Plot 3: Variable Importance Plot for Data Set"))
tree.boston <- tree(MEDV~., data=train.data)
summary(tree.boston)
plot(tree.boston)
text(tree.boston)
tree.boston <- tree(MEDV~., data=train.data)
summary(tree.boston)
plot(tree.boston)
text(tree.boston)
title("Plot 4: All Predictors")
tree.pred<- predict(tree.boston, newdata=test.data)
mean((tree.pred-true.vals)^2)
cv.boston<-cv.tree(tree.boston)
plot(cv.boston$size, cv.boston$dev, type="b")
cv.boston<-cv.tree(tree.boston)
plot(cv.boston$size, cv.boston$dev, type="b")
title("candidate tree sizes vs. error (deviation)")
best.size <- 5
pruned.tree<-prune.tree(tree.boston, best=best.size)
plot(pruned.tree)
text(pruned.tree)
best.size <- 5
pruned.tree<-prune.tree(tree.boston, best=best.size)
plot(pruned.tree)
text(pruned.tree)
title("Plot 6: Pruned Tree")
tree.pred2<- predict(pruned.tree, newdata=test.data)
mean((tree.pred2-true.vals)^2)
par(mfrow=c(1,2))
hist(fit.bos2$residuals, prob = TRUE, main = paste("Plot 1: Histogram of Residuals"))
lines(density(fit.bos2$residuals))
qqnorm(y=fit.bos2$residuals, main = paste("Plot 2: Q-Q Plot of Residuals"))
qqline(y=fit.bos2$residuals, datax = FALSE)
